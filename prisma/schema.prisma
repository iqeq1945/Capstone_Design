generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  name     String    @unique
  seed     Int       @default(0)
  password String    @db.VarChar(200)
  history  History[]
  novel    Novel[]
  post     Post[]
  cash     Cash[]
  like     Like[]
  star     Star[]
  comment  Comment[]
  @@map("users")
}

model Novel {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(200) @unique
  cycle     String
  content   String
  category  String
  authorId  Int
  image     String
  createdAt DateTime
  updatedAt DateTime
  author    User     @relation(fields: [authorId], references: [id])
  history   History[]
  post      Post[]
  like      Like[]
  @@index([authorId], map: "novels_authorId_fkey")
  @@map("novels")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String @db.VarChar(200)
  content   Json   @db.Json
  authorId  Int
  novelId   Int
  createdAt DateTime
  updatedAt DateTime
  author    User      @relation(fields: [authorId], references: [id])
  novel     Novel     @relation(fields: [novelId], references: [id])
  history   History[]
  star      Star[]
  comment   Comment[]
  @@index([authorId], map: "posts_authorId_fkey")
  @@index([novelId], map: "posts_novelId_fkey")
  @@map("posts")
}

model History {
  id        Int      @id @default(autoincrement())
  buyerId   Int
  novelId   Int
  postId    Int
  createdAt DateTime
  buyer     User     @relation(fields: [buyerId], references: [id])
  novel     Novel @relation(fields: [novelId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@index([buyerId], map: "histories_buyerId_fkey")
  @@index([postId], map: "histories_postId_fkey")
  @@map("histories")
}

model Cash {
  id        Int      @id @default(autoincrement())
  buyerId   Int
  buyer     User     @relation(fields: [buyerId], references: [id])
  seed      Int
  createdAt DateTime

  @@map("cashes")
}

model Like {
  userId Int
  user User @relation(fields: [userId], references: [id])
  novelId Int
  novel Novel @relation(fields: [novelId], references: [id])
  createdAt DateTime

  @@id([userId, novelId], name:"likeKey")
  @@map("likes")
}

model Star {
  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])
  createdAt DateTime
  star   Int
  @@id([userId, postId], name:"starKey")
  @@map("starts")
}

model Comment {
  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])
  createdAt DateTime
  updatedAt DateTime
  content String
  cite String
  @@id([userId, postId], name:"comment")
  @@map("comments")
}